// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PrehistoryMethodApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using PrehistoryMethodApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using PrehistoryMethodApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using PrehistoryMethodApp.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\onova\source\repos\PrehistoryMethodApp\_Imports.razor"
using PrehistoryMethodApp.Components;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/osmy")]
    public partial class OrderChronological : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 54 "C:\Users\onova\source\repos\PrehistoryMethodApp\Pages\OrderChronological.razor"
       
    [CascadingParameter] public IModalService Modal { get; set; }

    private List<Card> Cards;
    private List<Card> ShuffleCards;
    private State State = new();
    private State DefaultState;
    private State SuccessState;
    private State FailState;
    private Card activeItem;
    private Card lastActiveItem;
    private const int MAX_MISTAKES = 1;
    private Dictionary<int, Card> PlacedCards = new();
    private bool failure = false;
    private int mistakes = 0;

    protected override void OnInitialized()
    {
        var words = TasksDataService.TaskEight;
        Cards = words.ToList();
        ShuffleCards = Cards.ToList().OrderBy(x => Guid.NewGuid()).ToList();
        DefaultState = TasksDataService.TaskEightState["default"];
        SuccessState = TasksDataService.TaskEightState["success"];
        FailState = TasksDataService.TaskEightState["fail"];
        State = DefaultState;
    }

    public void OnDragStart(Card card, DragEventArgs dragEventArgs)
    {
        lastActiveItem = activeItem = card;
        dragEventArgs.DataTransfer.EffectAllowed = "move";
    }

    public void OnDragEnd(Card card)
    {
        if (card is null)
        {
            throw new ArgumentNullException(nameof(card));
        }

        lastActiveItem = activeItem;
        activeItem = default(Card);
    }

    public void OnDrop(int position)
    {
        PlacedCards[position] = lastActiveItem;
    }

    private void Check()
    {
        var param = new ModalParameters();

        if (PlacedCards.Count != Cards.Count)
        {
            param.Add("Advices", "Musíte seřadit všechna období.");
            Modal.Show<Advice>("Přesuňte všechna období!", param);
            return;
        }
        for(var i = 0; i < Cards.Count; i++)
        {
            if(PlacedCards[i].Equals(Cards[i]))
            {
                State = SuccessState;
                HideAll();
            }
            else
            {
                if (MAX_MISTAKES <= mistakes)
                {
                    State = FailState;
                    HideAll();
                }
                else
                {
                    param.Add("Advices", "Takhle po sobě jednotlivá období nenásledují, použijte tlačítko \"Reset\" a zkuste to znova.");
                    Modal.Show<Advice>("Špatně seřazeno, zbývá Vám ještě jeden pokus", param);
                    mistakes++;
                }
                return;
            }
        }

    }

    private string GetGameClasses() => CheckIfGameIsHidden() ? "card-hidden " : "";

    private bool CheckIfGameIsHidden() => failure;
    private bool CheckIfItemIsActive(Card card) => card.Equals(activeItem);

    private string GetItemClasses(Card card)
    {
        var output = "";
        output += CheckIfItemIsActive(card) ? "card-dragging " : "";
        return output;
    }

    private void Reset()
    {
        PlacedCards = new();
    }

    private void HideAll()
    {
        failure = true;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
